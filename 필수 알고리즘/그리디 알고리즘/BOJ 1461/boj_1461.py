import sys
import os

sys.stdin = open(os.path.join(os.path.dirname(__file__), 'input.txt'), encoding='utf-8')
"""
=== input.txt 를 불러오기 위한 코드 ===
"""

"""
제약 조건
시간제한 : 2초
0 <= N, M <= 50
책의 위치 != 0
|책의 위치| <= |10000|

책을 모두 제자리에 놔둘 떄 드는 최소 걸음 수 계산
한 걸음에 좌표 1칸
최초 좌표 0
N = 책의 개수
M = 한번에 들 수 있는 책의 개수
책을 전부 가져다 놓으면 0으로 돌아올 필요가 없다.

브루트 포스로는 가능한가?
=> 복잡도가 N! 아닌가?
=> M 의 값과 상관없이 모든 경우의 수를 봐야하기 때문이다.
=> N의 최대값이 50이기 때문에 O(50!) 이라서 브루트 포스 풀이로는 불가능

그리디 풀이
=> 50 log 50 이라서 풀이 가능

좌표가 0인 곳에서 멀수록 적게 가는 것이 최소 걸음이다.
=> 그런데 모든 도서륾 가져다 놓으면 움직일 필요가 없다. => 가장 먼 거리에 있는 곳을 가장 마지막으로 가야한다.
마지막으로 가야하는 루트를 제외하고 먼 거리에 있는 곳을 간다?

절대좌표 : 2 3 4
왕복거리 : 4 6 8
"""

N, M = map(int, input().split())
books = list(map(int, input().split()))

sorted_books = sorted(books)



